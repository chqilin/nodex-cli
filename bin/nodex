#!/usr/bin/env node

const program = require('commander');
const chalk = require('chalk');
const path = require('path');
const fs = require('fs-extra');
const simpleGit = require('simple-git/promise');
const git = simpleGit();
const logger = require('../lib/logger');

const TEMPLATE_REPO = 'https://github.com/leansocket/nodex-0.git';

program
    .version(require('../package').version, '-v, --version')
    .usage('<command> [options]')

program
    .command('init <project>')
    .description('init a new project')
    .action(async (project) => {
        const templateName = TEMPLATE_REPO.match(/^.+\/(.+)\.git$/)[1]
        const grep = dir => {
            const files = fs.readdirSync(dir)
            files.forEach(file => {
                const filePath = path.join(dir, file)
                const stat = fs.statSync(filePath)
                if (stat && stat.isDirectory()) {
                    grep(filePath)
                } 
                else {
                    if (/.json$/.test(file)) {
                        let data = fs.readFileSync(filePath, 'utf-8')
                        data = data.replace(new RegExp(templateName, 'g'), project)
                        fs.writeFileSync(filePath, data, 'utf8')
                    }
                    console.log(chalk.blue(`create ${file}`))
                }
            })
        };

        const dest = path.resolve(project)
        if (fs.pathExistsSync(dest)) {
            logger.error(`dest directory ${project} is not empty`)
            return
        }

        fs.ensureDirSync(dest)
        await git.silent(true).clone(TEMPLATE_REPO, dest)

        grep(dest)

        logger.log('\n');
        logger.log(`Successfully created ${chalk.green(project)}`);
        logger.log(`Get started with the following commands:\n`);
        logger.log(`$ cd ${chalk.green(project)}`);
        logger.log(`$ npm install`);
        logger.log('\n');
    })

program.on('command:*', function () {
    console.error(chalk.red('Invalid command: %s \nSee --help for a list of available commands.'), program.args.join(' '))
    process.exit(1)
})

program.parse(process.argv)
